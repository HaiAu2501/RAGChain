import hydra
from dotenv import load_dotenv
from src.builder import DatabaseBuilder
from src.workflow import create_workflow, initialize_state

load_dotenv()


@hydra.main(config_path="cfg", config_name="config", version_base="1.2")
def main(cfg):
    print("=== H·ªá th·ªëng RAG ƒëa b∆∞·ªõc v·ªõi T√¨m ki·∫øm Hybrid ===")
    
    # Check if hybrid retrieval is enabled
    use_hybrid = cfg.tree.retrieval.use_hybrid
    if use_hybrid:
        print("üîç Ch·∫ø ƒë·ªô T√¨m ki·∫øm Hybrid: Dense + Sparse (BM25)")
        print(f"   Ph∆∞∆°ng ph√°p Fusion: {cfg.tree.retrieval.fusion_method}")
        print(f"   Tr·ªçng s·ªë Dense: {cfg.tree.retrieval.dense_weight}")
        print(f"   Tr·ªçng s·ªë Sparse: {cfg.tree.retrieval.sparse_weight}")
    else:
        print("üîç Ch·ªâ s·ª≠ d·ª•ng Ch·∫ø ƒë·ªô T√¨m ki·∫øm Dense")
    
    # Step 1: Build or load vector database and BM25 index
    print("\n1. ƒêang thi·∫øt l·∫≠p c∆° s·ªü d·ªØ li·ªáu...")
    builder = DatabaseBuilder(cfg)
    
    try:
        result = builder.build_database()
        
        # Handle both tuple and single return values
        if isinstance(result, tuple):
            vectordb, bm25_index = result
        else:
            vectordb = result
            bm25_index = None
        
        if use_hybrid:
            # Check BM25 index status
            if bm25_index and bm25_index.bm25_index:
                print(f"‚úÖ Ch·ªâ m·ª•c BM25 s·∫µn s√†ng v·ªõi {len(bm25_index.doc_mapping)} t√†i li·ªáu")
            else:
                print("‚ö†Ô∏è  Ch·ªâ m·ª•c BM25 kh√¥ng kh·∫£ d·ª•ng - quay l·∫°i ch·ªâ s·ª≠ d·ª•ng t√¨m ki·∫øm dense")
                bm25_index = None
        else:
            print("üîç Ch·ªâ s·ª≠ d·ª•ng ch·∫ø ƒë·ªô t√¨m ki·∫øm dense (hybrid ƒë√£ t·∫Øt trong c·∫•u h√¨nh)")
            bm25_index = None
                
    except ImportError as e:
        print(f"‚ö†Ô∏è  L·ªói ph·ª• thu·ªôc BM25: {e}")
        print("‚ö†Ô∏è  C√†i ƒë·∫∑t v·ªõi: pip install rank-bm25")
        print("‚ö†Ô∏è  Quay l·∫°i ch·ªâ s·ª≠ d·ª•ng t√¨m ki·∫øm dense")
        
        # Try to get just the vector database
        try:
            result = builder.build_database()
            vectordb = result[0] if isinstance(result, tuple) else result
            bm25_index = None
        except Exception as e2:
            print(f"‚ùå L·ªói x√¢y d·ª±ng c∆° s·ªü d·ªØ li·ªáu vector: {e2}")
            raise e2
            
    except Exception as e:
        print(f"‚ùå L·ªói x√¢y d·ª±ng c∆° s·ªü d·ªØ li·ªáu: {e}")
        raise e
    
    # Step 2: Create workflow
    print("\n2. ƒêang kh·ªüi t·∫°o quy tr√¨nh RAG ƒëa b∆∞·ªõc...")
    workflow = create_workflow(cfg, vectordb, bm25_index)
    
    # Step 3: Interactive question-answering loop
    print("\n3. S·∫µn s√†ng cho c√°c c√¢u h·ªèi!")
    print("Nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n (g√µ 'quit' ƒë·ªÉ tho√°t):")
    
    while True:
        try:
            question = input("\nC√¢u h·ªèi: ").strip()
            
            if question.lower() in ['quit', 'exit', 'q', 'tho√°t', 'k·∫øt th√∫c']:
                print("T·∫°m bi·ªát!")
                break
                
            if not question:
                print("Vui l√≤ng nh·∫≠p m·ªôt c√¢u h·ªèi h·ª£p l·ªá.")
                continue
            
            print(f"\nƒêang x·ª≠ l√Ω c√¢u h·ªèi: {question}")
            print("=" * 50)
            
            # Initialize state for this question
            initial_state = initialize_state(
                question=question,
                max_iterations=cfg.tree.hyperparams.n_iterations
            )
            
            # Run the workflow
            try:
                result = workflow.invoke(initial_state)
                
                # Display final answer
                print(f"\nüéØ C√ÇU TR·∫¢ L·ªúI CU·ªêI C√ôNG:")
                print("=" * 50)
                print(result.get("final_answer", "Kh√¥ng c√≥ c√¢u tr·∫£ l·ªùi ƒë∆∞·ª£c t·∫°o"))
                print("=" * 50)
                
            except Exception as e:
                print(f"‚ùå L·ªói x·ª≠ l√Ω c√¢u h·ªèi: {str(e)}")
                print("Vui l√≤ng th·ª≠ m·ªôt c√¢u h·ªèi kh√°c ho·∫∑c ki·ªÉm tra c·∫•u h√¨nh c·ªßa b·∫°n.")
        
        except KeyboardInterrupt:
            print("\n\nB·ªã gi√°n ƒëo·∫°n b·ªüi ng∆∞·ªùi d√πng. T·∫°m bi·ªát!")
            break
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {str(e)}")
            continue

# Nh·ªØng ph√°t tri·ªÉn m·ªõi nh·∫•t trong tr√≠ tu·ªá nh√¢n t·∫°o l√† g√¨ v√† ch√∫ng t√°c ƒë·ªông nh∆∞ th·∫ø n√†o ƒë·∫øn ph√°t tri·ªÉn ph·∫ßn m·ªÅm?

if __name__ == "__main__":
    main()